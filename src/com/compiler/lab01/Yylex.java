package com.compiler.lab01;
/* The following code was generated by JFlex 1.3.5 on 2/25/10 2:25 PM */

/* this is the scanner for the SymTabDriver */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 2/25/10 2:25 PM from the specification file
 * <tt>file:/d:/mum/comp440/lab-projects/DE/CP/lab1/solutn/test_lexer.jflex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  5,  0,  0,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  0,  0,  0,  0,  0,  0, 33, 34,  8,  0, 35,  0, 36,  7, 
     2, 20, 21,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  6, 
     0, 25, 31, 13, 16, 10, 28, 27, 24, 22,  1, 18, 17, 30,  9, 14, 
    15,  1, 26, 12, 23, 19, 29, 11,  1, 32,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    37,    74,   111,   148,   185,   222,   259,   296,   333, 
      370,   407,   444,   481,   518,   555,   592,    74,    74,    74, 
       74,   629,   666,    74,   703,   740,   777,   814,   851,   888, 
      925,   962,   999,  1036,  1073,  1110,  1147,  1184,  1221,  1258, 
     1295,    74,    74,  1332,  1369,  1406,  1443,  1480,  1517,  1554, 
     1591,  1628,   111,  1665,  1702,  1739,  1776,  1813,  1850,  1887, 
     1924,  1961,   111,  1998,  2035,  2072,   111,  2109,  2146,  2183, 
     2220,  2257,  2294,  2331,   111,  2368,  2405,   111,  2442,  2479, 
     2516,  2553,  2590,  2627,   111,  2664,  2701,  2738,   111,  2775, 
     2812,  2849,  2886,  2923,   111,   111,  2960,  2997,  3034,  3071, 
     3108,  3145,   111,   111,   111,  3182,   111,  3219,  3256,  3293, 
     3330,  3367,  3404,   111,  3441,  3478,  3515,   111
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\6\3\3\1\10"+
    "\1\11\1\4\1\12\1\13\1\4\1\14\1\4\1\15"+
    "\2\4\2\5\1\16\5\4\1\17\1\20\1\21\2\4"+
    "\1\22\1\23\1\24\1\25\4\26\1\27\1\30\1\26"+
    "\1\31\1\32\34\26\46\0\2\4\3\0\1\4\2\0"+
    "\30\4\6\0\1\5\21\0\2\5\22\0\1\6\1\0"+
    "\1\6\44\0\1\30\40\0\2\4\3\0\1\4\2\0"+
    "\1\4\1\33\26\4\5\0\2\4\3\0\1\4\2\0"+
    "\1\34\27\4\5\0\2\4\3\0\1\4\2\0\16\4"+
    "\1\35\11\4\5\0\2\4\3\0\1\4\2\0\10\4"+
    "\1\36\6\4\1\37\10\4\5\0\2\4\3\0\1\4"+
    "\2\0\21\4\1\40\6\4\5\0\2\4\3\0\1\4"+
    "\2\0\5\4\1\41\22\4\5\0\2\4\3\0\1\4"+
    "\2\0\1\42\27\4\5\0\2\4\3\0\1\4\2\0"+
    "\10\4\1\43\17\4\5\0\2\4\3\0\1\4\2\0"+
    "\5\4\1\44\12\4\1\45\7\4\5\0\2\4\3\0"+
    "\1\4\2\0\1\4\1\46\26\4\4\0\5\26\1\0"+
    "\1\26\1\47\1\50\41\26\1\30\1\26\1\47\1\50"+
    "\41\26\1\0\1\26\1\51\1\52\41\26\1\0\1\26"+
    "\1\53\1\54\34\26\1\0\2\4\3\0\1\4\2\0"+
    "\2\4\1\55\25\4\5\0\2\4\3\0\1\4\2\0"+
    "\4\4\1\56\2\4\1\57\20\4\5\0\2\4\3\0"+
    "\1\4\2\0\21\4\1\60\6\4\5\0\2\4\3\0"+
    "\1\4\2\0\20\4\1\61\7\4\5\0\2\4\3\0"+
    "\1\4\2\0\20\4\1\62\7\4\5\0\2\4\3\0"+
    "\1\4\2\0\15\4\1\63\12\4\5\0\2\4\3\0"+
    "\1\4\2\0\5\4\1\64\22\4\5\0\2\4\3\0"+
    "\1\4\2\0\16\4\1\65\11\4\5\0\2\4\3\0"+
    "\1\4\2\0\5\4\1\66\22\4\5\0\2\4\3\0"+
    "\1\4\2\0\15\4\1\67\12\4\5\0\2\4\3\0"+
    "\1\4\2\0\21\4\1\70\6\4\5\0\2\4\3\0"+
    "\1\4\2\0\16\4\1\71\11\4\4\0\5\26\1\0"+
    "\1\26\1\51\1\0\41\26\1\0\1\26\1\0\1\54"+
    "\41\26\1\0\1\26\1\51\1\50\41\26\1\0\1\26"+
    "\1\47\1\54\34\26\1\0\2\4\3\0\1\72\2\0"+
    "\30\4\5\0\2\4\3\0\1\4\2\0\10\4\1\73"+
    "\17\4\5\0\2\4\3\0\1\74\2\0\30\4\5\0"+
    "\2\4\3\0\1\4\2\0\15\4\1\75\12\4\5\0"+
    "\2\4\3\0\1\4\2\0\3\4\1\76\24\4\5\0"+
    "\2\4\3\0\1\4\2\0\21\4\1\77\6\4\5\0"+
    "\2\4\3\0\1\4\2\0\1\100\27\4\5\0\2\4"+
    "\3\0\1\4\2\0\11\4\1\101\16\4\5\0\2\4"+
    "\3\0\1\4\2\0\20\4\1\102\7\4\5\0\2\4"+
    "\3\0\1\4\2\0\7\4\1\103\20\4\5\0\2\4"+
    "\3\0\1\4\2\0\15\4\1\104\12\4\5\0\2\4"+
    "\3\0\1\4\2\0\17\4\1\105\10\4\5\0\2\4"+
    "\3\0\1\4\2\0\3\4\1\106\22\4\1\107\1\4"+
    "\5\0\2\4\3\0\1\4\2\0\5\4\1\110\22\4"+
    "\5\0\2\4\3\0\1\4\2\0\3\4\1\111\24\4"+
    "\5\0\2\4\3\0\1\4\2\0\1\112\27\4\5\0"+
    "\2\4\3\0\1\4\2\0\3\4\1\113\24\4\5\0"+
    "\2\4\3\0\1\4\2\0\16\4\1\114\11\4\5\0"+
    "\2\4\3\0\1\4\2\0\12\4\1\115\15\4\5\0"+
    "\2\4\3\0\1\4\2\0\16\4\1\116\11\4\5\0"+
    "\2\4\3\0\1\4\2\0\20\4\1\117\7\4\5\0"+
    "\2\4\3\0\1\4\2\0\5\4\1\120\22\4\5\0"+
    "\2\4\3\0\1\4\2\0\4\4\1\121\23\4\5\0"+
    "\2\4\3\0\1\4\2\0\10\4\1\122\17\4\5\0"+
    "\2\4\3\0\1\4\2\0\3\4\1\123\24\4\5\0"+
    "\2\4\3\0\1\4\2\0\4\4\1\124\23\4\5\0"+
    "\2\4\3\0\1\4\2\0\22\4\1\125\5\4\5\0"+
    "\2\4\3\0\1\126\2\0\30\4\5\0\2\4\3\0"+
    "\1\4\2\0\6\4\1\127\21\4\5\0\2\4\3\0"+
    "\1\4\2\0\26\4\1\130\1\4\5\0\2\4\3\0"+
    "\1\4\2\0\7\4\1\131\20\4\5\0\2\4\3\0"+
    "\1\4\2\0\5\4\1\132\22\4\5\0\2\4\3\0"+
    "\1\4\2\0\5\4\1\133\22\4\5\0\2\4\3\0"+
    "\1\4\2\0\15\4\1\134\12\4\5\0\2\4\3\0"+
    "\1\4\2\0\5\4\1\135\22\4\5\0\2\4\3\0"+
    "\1\4\2\0\3\4\1\136\24\4\5\0\2\4\3\0"+
    "\1\4\2\0\13\4\1\137\1\140\13\4\5\0\2\4"+
    "\3\0\1\4\2\0\10\4\1\141\17\4\5\0\2\4"+
    "\3\0\1\4\2\0\6\4\1\142\21\4\5\0\2\4"+
    "\3\0\1\4\2\0\4\4\1\143\23\4\5\0\2\4"+
    "\3\0\1\4\2\0\1\144\27\4\5\0\2\4\3\0"+
    "\1\4\2\0\6\4\1\145\21\4\5\0\2\4\3\0"+
    "\1\4\2\0\27\4\1\146\5\0\2\4\3\0\1\4"+
    "\2\0\1\4\1\147\26\4\5\0\2\4\3\0\1\4"+
    "\2\0\1\4\1\150\26\4\5\0\2\4\3\0\1\4"+
    "\2\0\11\4\1\151\16\4\5\0\2\4\3\0\1\4"+
    "\2\0\22\4\1\152\5\4\5\0\2\4\3\0\1\4"+
    "\2\0\1\4\1\153\26\4\5\0\2\4\3\0\1\4"+
    "\2\0\25\4\1\154\2\4\5\0\2\4\3\0\1\155"+
    "\2\0\30\4\5\0\2\4\3\0\1\4\2\0\16\4"+
    "\1\156\11\4\5\0\2\4\3\0\1\4\2\0\25\4"+
    "\1\157\2\4\5\0\2\4\3\0\1\4\2\0\20\4"+
    "\1\160\7\4\5\0\2\4\3\0\1\4\2\0\1\4"+
    "\1\161\26\4\5\0\2\4\3\0\1\4\2\0\26\4"+
    "\1\162\1\4\5\0\2\4\3\0\1\4\2\0\16\4"+
    "\1\163\11\4\5\0\2\4\3\0\1\4\2\0\17\4"+
    "\1\164\10\4\5\0\2\4\3\0\1\4\2\0\5\4"+
    "\1\165\22\4\5\0\2\4\3\0\1\4\2\0\7\4"+
    "\1\166\20\4\4\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  1,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3552];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 113: 
          {  return (new Yytoken(Yytoken.t_print_symtab,yytext(),
				        yyline,yychar,yychar+12));  }
        case 119: break;
        case 95: 
          {  return (new Yytoken(Yytoken.t_lookup2,yytext(),
				    yyline,yychar,yychar+7));  }
        case 120: break;
        case 94: 
          {  return (new Yytoken(Yytoken.t_lookup1,yytext(),
				    yyline,yychar,yychar+7));  }
        case 121: break;
        case 88: 
          {  return (new Yytoken(Yytoken.t_method,yytext(),
				    yyline,yychar,yychar+6));  }
        case 122: break;
        case 84: 
          {  return (new Yytoken(Yytoken.t_string,yytext(),
				    yyline,yychar,yychar+6));  }
        case 123: break;
        case 2: 
        case 24: 
        case 25: 
          { 
  System.out.println("Illegal character: <" + yytext() + ">");
	Yytoken.error(Yytoken.E_UNMATCHED);
 }
        case 124: break;
        case 41: 
          {  comment_count++;  }
        case 125: break;
        case 3: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 63: 
        case 64: 
        case 65: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 75: 
        case 76: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 85: 
        case 86: 
        case 87: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 105: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 114: 
        case 115: 
        case 116: 
          {  return (new Yytoken(Yytoken.t_ident,yytext(),
				yyline,yychar,yychar+yylength()));  }
        case 126: break;
        case 6: 
        case 23: 
          {   }
        case 127: break;
        case 5: 
          {   }
        case 128: break;
        case 1: 
        case 21: 
        case 22: 
        case 40: 
        case 43: 
          {   }
        case 129: break;
        case 42: 
          {  if (--comment_count == 0) yybegin(YYINITIAL);  }
        case 130: break;
        case 117: 
          {  return (new Yytoken(Yytoken.t_method_scope,yytext(),
					    yyline,yychar,yychar+16));  }
        case 131: break;
        case 4: 
          {  return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength()));  }
        case 132: break;
        case 18: 
          {  return (new Yytoken(Yytoken.t_r_par,yytext(),
			     yyline,yychar,yychar+1));  }
        case 133: break;
        case 17: 
          {  return (new Yytoken(Yytoken.t_l_par,yytext(),
			     yyline,yychar,yychar+1));  }
        case 134: break;
        case 19: 
          {  return (new Yytoken(Yytoken.t_comma,yytext(),
			     yyline,yychar,yychar+1));  }
        case 135: break;
        case 62: 
          {  return (new Yytoken(Yytoken.t_char,yytext(),
				    yyline,yychar,yychar+4));  }
        case 136: break;
        case 66: 
          {  return (new Yytoken(Yytoken.t_void,yytext(),
				    yyline,yychar,yychar+4));  }
        case 137: break;
        case 74: 
          {  return (new Yytoken(Yytoken.t_class,yytext(),
				    yyline,yychar,yychar+5));  }
        case 138: break;
        case 77: 
          {  return (new Yytoken(Yytoken.t_float,yytext(),
				    yyline,yychar,yychar+5));  }
        case 139: break;
        case 106: 
          {  return (new Yytoken(Yytoken.t_end_scope,yytext(),
				    yyline,yychar,yychar+9));  }
        case 140: break;
        case 104: 
          {  return (new Yytoken(Yytoken.t_new_block,yytext(),
				    yyline,yychar,yychar+9));  }
        case 141: break;
        case 103: 
          {  return (new Yytoken(Yytoken.t_new_scope,yytext(),
				    yyline,yychar,yychar+9));  }
        case 142: break;
        case 102: 
          {  return (new Yytoken(Yytoken.t_variable,yytext(),
				    yyline,yychar,yychar+8));  }
        case 143: break;
        case 20: 
          {  return (new Yytoken(Yytoken.t_dot,yytext(),
			     yyline,yychar,yychar+1));  }
        case 144: break;
        case 52: 
          {  return (new Yytoken(Yytoken.t_int,yytext(),
				    yyline,yychar,yychar+3));  }
        case 145: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
